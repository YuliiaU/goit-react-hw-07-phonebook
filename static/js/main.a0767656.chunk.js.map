{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Container/Container.module.css","components/Container/Container.js","redux/contacts-action.js","redux/contacts-operation.js","redux/contacts-selection.js","components/Form/Form.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","styles","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","a","contact","post","data","id","delete","then","catch","error","get","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","connect","onSubmit","contactsOperations","useState","setName","setNumber","useSelector","contactsSelectors","useDispatch","handleChange","event","target","value","reset","nameInputId","shortid","generate","numberInputId","e","preventDefault","some","alert","style","form","htmlFor","onChange","type","pattern","title","required","button","onDeleteContacts","map","item","onClick","fetchContacts","useEffect","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0767656.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__9FNzK\",\"button\":\"Form_button__Oxu_1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contacts_button__18szi\",\"item\":\"Contacts_item__2McL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1h1Ru\"};","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Container;\n","\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n} from './contacts-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n\r\n    // axios\r\n    //   .post('/contacts', contact)\r\n    //   .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    //   .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n\r\n  // try {\r\n  //   const { data } = await axios.delete(`/contacts/${id}`);\r\n  //   dispatch(deleteContactSuccess(data));\r\n  // } catch (error) {\r\n  //   dispatch(deleteContactError(error));\r\n  // }\r\n};\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { addContact, deleteContact, fetchContacts };","  \nimport { createSelector } from 'reselect';\n\nconst getContacts = state => state.contacts.items;\n\nconst getLoading = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n  getContacts,\n  getFilter,\n  getLoading,\n  getVisibleContacts,\n};","import { useState } from 'react';\nimport style from './Form.module.css';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, contactsOperations } from '../../redux';\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form onSubmit={handleSubmit} className={style.form}>\n      <label htmlFor={nameInputId}>\n        <p>Name</p>\n        <input\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label htmlFor={numberInputId}>\n        <p>Number</p>\n\n        <input\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={style.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux';\n\nconst Contacts = ({ contacts, onDeleteContacts }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={style.item}>\n        <p>{name}</p>\n        <span>{number}</span>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContacts(id)}\n          className={style.button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  onDeleteContacts: PropTypes.func.isRequired,\n};\n\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import style from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <p>Find contacts by name</p>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value:  contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","\nimport Container from './components/Container';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts';\nimport Filter from './components/Filter';\n\nimport {useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from './redux';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <Contacts />\n    </Container>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\n\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  changeFilter,\n  fetchContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n} from './contacts-action';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactError]: (_, { payload }) => payload,\n  [fetchContactRequest]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport contactsReducer from './contacts-reducer';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    // contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\n// const exportedObject = {\n//   store,\n//   persistor,\n// };\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport './style.css';\nimport {} from './redux/contacts-types';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}